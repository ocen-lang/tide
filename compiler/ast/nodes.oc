//* Contains the core AST types

import std::vector::Vector
import std::map::Map
import std::mem
import std::span::{ Span, Location }
import std::sv::{ SV }

import @tokens::{ TokenType, Token }

enum ASTType {
    Assert
    BoolLiteral
    Break
    Call
    Constant
    Continue
    Error
    Identifier
    If
    Import
    IntLiteral
    Member
    NSLookup
    Return
    ArrowReturn
    Yield
    StringLiteral
    SizeOf
    VarDeclaration
    While
    For
    CharLiteral
    FloatLiteral
    FormatStringLiteral
    Cast
    Null
    MethodCall
    Match
    Defer
    ArrayLiteral
    Super

    UnaryOp
    BinaryOp

    // Top-level
    Block
    Function
    Class
    Enum
    Namespace
}

struct Variable {
    sym: &Symbol
    //* Only for function default arguments
    default_value: &AST
}

def Variable::new(): &Variable {
    let var = mem::alloc<Variable>()
    return var
}

struct VarDeclaration {
    var: &Variable
    init: &AST
}

struct Class {
    sym: &Symbol
    methods: &Vector<&AST>
    has_super: bool
    super_name: SV
}

def Class::new(sym: &Symbol): &Class {
    let struc = mem::alloc<Class>()
    struc.sym = sym
    struc.methods = Vector<&AST>::new()
    return struc
}

struct Enum {
    sym: &Symbol
    span: Span
    fields: &Vector<&Variable>
}

def Enum::new(): &Enum {
    let enum_ = mem::alloc<Enum>()
    enum_.fields = Vector<&Variable>::new()
    return enum_
}

def Enum::get_field(&this, name: str): &Variable {
    for field : .fields.iter() {
        if field.sym.name == name return field
    }
    return null
}

//! Used for operator overloading
enum Operator {
    // Unary
    Address
    Dereference
    Negate
    Not
    BitwiseNot
    IsNotNull
    PreIncrement
    PreDecrement
    PostIncrement
    PostDecrement

    // Binary
    And
    Assignment
    BitwiseAnd
    BitwiseOr
    BitwiseXor
    Divide
    DivideEquals
    Equals
    GreaterThan
    GreaterThanEquals
    In
    Index
    LeftShift
    LessThan
    LessThanEquals
    Minus
    MinusEquals
    Modulus
    Multiply
    MultiplyEquals
    NotEquals
    Or
    Plus
    PlusEquals
    RightShift
    LeftShiftEquals
    RightShiftEquals

    // Technically binary, but need 3 operands for overloading
    IndexAssign

    Error
}

def Operator::from_operator_overload_str(s: str): Operator => match s {
    "+" => Plus
    "-" => Minus
    "*" => Multiply
    "/" => Divide
    "==" => Equals
    "!=" => NotEquals
    "[]" => Index
    "<<" => LeftShift
    ">>" => RightShift
    "&" => BitwiseAnd
    "|" => BitwiseOr
    "+=" => PlusEquals
    "-=" => MinusEquals
    "*=" => MultiplyEquals
    "/=" => DivideEquals
    "[]=" => IndexAssign
    "<<=" => LeftShiftEquals
    ">>=" => RightShiftEquals
    "%" => Modulus
    "in" => In
    else => Error
}

def Operator::from_token(tok: Token): Operator => match tok.type {
    Ampersand => BitwiseAnd
    And => And
    Caret => BitwiseXor
    EqualEquals => Equals
    Equals => Assignment
    GreaterThan => GreaterThan
    GreaterThanEquals => GreaterThanEquals
    LessThan => LessThan
    LessThanEquals => LessThanEquals
    Line => BitwiseOr
    Minus => Minus
    MinusEquals => MinusEquals
    NotEquals => NotEquals
    Or => Or
    Percent => Modulus
    Plus => Plus
    PlusEquals => PlusEquals
    Slash => Divide
    SlashEquals => DivideEquals
    Star => Multiply
    StarEquals => MultiplyEquals
    Identifier => match tok.text {
        "in" => In
        else => std::panic(`Unhandled identifier in Operator::from_token: {tok.text}`)
    }
    else => std::panic(`Unhandled token type in Operator::from_token: {tok.type.str()}`)
}

def Operator::num_overload_params(this): u32 => match this {
    Address | Dereference | Negate | Not | BitwiseNot | IsNotNull |
    PreIncrement | PreDecrement | PostIncrement | PostDecrement => 1

    And | Assignment | BitwiseAnd | BitwiseOr | LeftShiftEquals | Divide |
    RightShiftEquals | BitwiseXor | DivideEquals | Equals | GreaterThan |
    GreaterThanEquals | Index | LeftShift | LessThan | LessThanEquals |
    Minus | MinusEquals | Modulus | Multiply | MultiplyEquals | Or | Plus |
    NotEquals | PlusEquals | RightShift | In => 2

    IndexAssign => 3

    Error => 0
}

def Operator::needs_lhs_pointer_for_overload(this): bool => match this {
    MultiplyEquals => true
    DivideEquals => true
    PlusEquals => true
    MinusEquals => true
    IndexAssign => true
    LeftShiftEquals => true
    RightShiftEquals => true
    else => false
}

enum FunctionType {
    Script
    Function
    Method
    Constructor
}

struct Function {
    sym: &Symbol
    params: &Vector<&Variable>
    body: &AST
    exits: bool
    span: Span
    decorators: &Vector<&AST>

    operator_overloads: &Vector<Operator>
}

def Function::new(): &Function {
    let func = mem::alloc<Function>()
    func.params = Vector<&Variable>::new()
    return func
}

struct Block {
    statements: &Vector<&AST>
}

struct Identifier {
    name: SV
    span: Span
}

struct Argument {
    expr: &AST
    label: str
    label_span: Span
}

def Argument::new(expr: &AST, label_token: &Token = null): &Argument {
    let arg = mem::alloc<Argument>()
    arg.expr = expr
    if label_token? then arg.label = label_token.text.data.copy()
    if label_token? then arg.label_span = label_token.span
    return arg
}

struct FuncCall {
    callee: &AST
    args: &Vector<&Argument>
    func: &Function

    is_constructor: bool
    is_function_pointer: bool
}

enum ImportPartType {
    Single
    Multiple
    Wildcard
}

struct ImportPartSingle {
    name: str
    alias: str
    alias_span: Span
}

union ImportPartUnion {
    single: ImportPartSingle
    paths: &Vector<&Vector<&ImportPart>>
}

struct ImportPart {
    type: ImportPartType
    u: ImportPartUnion
    span: Span
    resolved_symbol: &Symbol
}

def ImportPart::new(type: ImportPartType, span: Span): &ImportPart {
    let part = mem::alloc<ImportPart>()
    part.type = type
    part.span = span
    return part
}

enum ImportType {
    //* Import from a global / library: `import foo`
    GlobalNamespace
    //* Import from a project namespace: `import @foo`
    ProjectNamespace
    //* Import from current / parent dir: `import ..foo`
    ParentNamespace
    //* Import from a local namespace: `import ::foo`
    CurrentScope
}

struct Import {
    parts: &Vector<&ImportPart>

    type: ImportType
    // For FromParentNamespace imports, we might have something like `import ..foo`, in which
    // case we need to know how namespace levels to go up.
    parent_count: u32
    export: bool
}

struct NumLiteral {
    text: str
    // TODO: Add `Value` type
}

struct Binary {
    op: Operator
    lhs: &AST
    rhs: &AST
    op_span: Span
}

def Binary::new(op: Operator, lhs: &AST, rhs: &AST, op_span: Span): &Binary {
    let binary = mem::alloc<Binary>()
    binary.op = op
    binary.lhs = lhs
    binary.rhs = rhs
    binary.op_span = op_span
    return binary
}

struct Unary {
    op: Operator
    expr: &AST
    op_span: Span
}

def Unary::new(op: Operator, expr: &AST, op_span: Span): &Unary {
    let unary = mem::alloc<Unary>()
    unary.op = op
    unary.expr = expr
    unary.op_span = op_span
    return unary
}

struct NSLookup {
    lhs: &AST
    rhs_name: SV
    rhs_span: Span
}

def NSLookup::new(lhs: &AST, rhs_name: SV, rhs_span: Span): &NSLookup {
    let lookup = mem::alloc<NSLookup>()
    lookup.lhs = lhs
    lookup.rhs_name = rhs_name
    lookup.rhs_span = rhs_span
    return lookup
}

struct Member {
    lhs: &AST
    rhs_name: SV
    rhs_span: Span
    is_pointer: bool
}

def Member::new(lhs: &AST, rhs_name: SV, rhs_span: Span): &Member {
    let member = mem::alloc<Member>()
    member.lhs = lhs
    member.rhs_name = rhs_name
    member.rhs_span = rhs_span
    return member
}

struct Assertion {
    expr: &AST
    msg: &AST
}

struct IfStatement {
    cond: &AST
    body: &AST
    els: &AST
}

struct Loop {
    init: &AST
    cond: &AST
    step: &AST
    body: &AST
}

struct FormatString {
    parts: &Vector<str>
    specs: &Vector<str>
    exprs: &Vector<&AST>
}


struct MatchCase {
    cond: &AST
    body: &AST
    cmp_fn: &Function
}

def MatchCase::new(cond: &AST, body: &AST): &MatchCase {
    let _case = mem::alloc<MatchCase>()
    _case.cond = cond
    _case.body = body
    return _case
}

struct Match {
    expr: &AST
    cases: &Vector<&MatchCase>
    defolt: &AST
    is_custom_match: bool
    defolt_span: Span
}

def Match::new(): &Match {
    let match_ = mem::alloc<Match>()
    match_.cases = Vector<&MatchCase>::new()
    return match_
}

struct ArrayLiteral {
    elements: &Vector<&AST>
}

struct Namespace {
    parent: &Namespace
    statements: &Vector<&AST>
    sym: &Symbol
    span: Span
    file_source: str
}

def Namespace::new(): &Namespace {
    let ns = mem::alloc<Namespace>()
    ns.statements = Vector<&AST>::new()
    return ns
}

union ASTUnion {
    assertion: Assertion
    binary: &Binary
    block: Block
    bool_literal: bool
    call: FuncCall
    ident: Identifier
    if_stmt: IfStatement
    import_path: Import
    lookup: &NSLookup
    loop: Loop
    member: &Member
    num_literal: NumLiteral
    string_literal: SV
    char_literal: SV
    unary: &Unary
    var_decl: VarDeclaration
    fmt_str: FormatString
    match_stmt: &Match
    array_literal: ArrayLiteral
    child: &AST
    func: &Function
    class: &Class
    enom: &Enum
    ns: &Namespace
    //! Stores `name` from `super.name`
    super: Identifier
}

struct AST {
    type: ASTType
    span: Span
    u: ASTUnion
}

def AST::new(type: ASTType, span: Span): &AST {
    let ast = mem::alloc<AST>()
    ast.type = type
    ast.span = span
    return ast
}

def AST::new_ident(name: SV, span: Span): &AST {
    let ast = AST::new(Identifier, span)
    ast.u.ident.name = name
    return ast
}

def AST::new_unop(op: Operator, span: Span, expr: &AST): &AST {
    let ast = AST::new(UnaryOp, span)
    ast.u.unary = Unary::new(op, expr, span)
    return ast
}

def AST::new_binop(op: Operator, lhs: &AST, rhs: &AST, op_span: Span): &AST {
    let span = lhs.span.join(rhs.span)
    let ast = AST::new(BinaryOp, span)
    ast.u.binary = Binary::new(op, lhs, rhs, op_span)
    return ast
}

struct Symbol {
    //* Name in the scope it was defined in
    name: SV
    //* Fully qualified display name, including namespaces
    display: SV
    //* Span of the declaration
    span: Span

    //* Comment attached to the declaration
    comment: SV
    comment_loc: Location
}

def Symbol::new(name: SV, display: SV, span: Span): &Symbol {
    let item = mem::alloc<Symbol>()
    item.name = name
    item.display = display
    item.span = span
    return item
}

def Symbol::join_display(a: SV, b: SV): SV => if a.len == 0 then b else SV::from_str(`{a}.{b}`)
def Symbol::join_full_name(a: SV, b: SV): SV => if a.len == 0 then b else SV::from_str(`{a}.{b}`)

def Symbol::new_with_parent(parent: &Symbol, name: SV, span: Span): &Symbol {
    let display = Symbol::join_display(parent.display, name)
    return Symbol::new(name, display, span)
}

def Symbol::update_parent(&this, parent: &Symbol) {
    .display = Symbol::join_display(parent.display, .name)
}

def Symbol::from_variable(name: SV, var: &Variable, span: Span): &Symbol {
    let item = Symbol::new(
        name: name,
        display: name,
        span: span,
    )
    return item
}
