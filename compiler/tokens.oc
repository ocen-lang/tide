//* Definitions for Tokens

import std::span::{ Span, Location }
import std::sv::{ SV }
import std::mem

struct Token {
    type: TokenType
    span: Span
    text: SV
    seen_newline: bool

    //* Comment occuring *before* this token
    comment: SV
    comment_loc: Location
}

def Token::new(type: TokenType, span: Span, text: SV): Token {
    let tok = Token(
        type,
        span,
        text,
        seen_newline: false,
        comment: SV::from_str(""),
        comment_loc: Location::default()
    )
    return tok
}

def Token::from_type(type: TokenType, span: Span): Token => Token::new(type, span, SV::from_str(""))

def Token::from_ident(text: SV, span: Span): Token {
    let type = TokenType::from_text(text)
    return Token::new(type, span, text)
}

// def Token::str(&this): str => `{.span.str()}: {.type.str()}`

def Token::is_word(this): bool => match .type {
    TokenType::Identifier => true
    else => .type as u64 > TokenType::BEGIN_KEYWORDS as u64
}

def Token::is_identifier(this, name: str): bool => match .type {
    TokenType::Identifier => .text == name
    else => false
}

enum TokenType {
    // Other tokens
    AtSign
    Ampersand
    Backtick
    Caret
    CharLiteral
    CloseCurly
    CloseParen
    CloseSquare
    Colon
    ColonColon
    Comma
    Dot
    EOF
    Ellipsis
    Equals
    EqualEquals
    Exclamation
    FatArrow
    FloatLiteral
    FormatStringLiteral
    GreaterThan
    GreaterThanEquals
    Identifier
    IntLiteral
    LessThan
    LessThanEquals
    Line
    Minus
    MinusEquals
    MinusMinus
    NotEquals
    OpenCurly
    OpenParen
    OpenSquare
    Percent
    Plus
    PlusEquals
    PlusPlus
    Question
    Semicolon
    Slash
    SlashEquals
    Star
    StarEquals
    StringLiteral
    Tilde

    //* Not an actual token, just here for convenience
    Newline

    BEGIN_KEYWORDS

    // Keywords
    And
    Assert
    Break
    Continue
    Def
    Defer
    Extends
    Else
    Enum
    False
    For
    If
    Let
    Match
    Null
    Not
    Or
    Return
    Class
    True
    Then
    Import
    Yield
    While
    This
    Super
}

def TokenType::from_text(text: SV): TokenType => match text {
    "and" => And
    "assert" => Assert
    "break" => Break
    "continue" => Continue
    "def" => Def
    "defer" => Defer
    "else" => Else
    "enum" => Enum
    "extends" => Extends
    "false" => False
    "for" => For
    "if" => If
    "let" => Let
    "match" => Match
    "not" => Not
    "null" => Null
    "or" => Or
    "return" => Return
    "class" => Class
    "true" => True
    "then" => Then
    "import" => Import
    "yield" => Yield
    "while" => While
    "this" => This
    "super" => Super
    else => Identifier
}

def TokenType::str(this): str => match this {
    // Keywords
    And => "and"
    Assert => "assert"
    Break => "break"
    Continue => "continue"
    Def => "def"
    Defer => "defer"
    Else => "else"
    Enum => "enum"
    Extends => "extends"
    False => "false"
    For => "for"
    If => "if"
    Let => "let"
    Match => "match"
    Not => "not"
    Null => "null"
    Or => "or"
    Return => "return"
    Class => "class"
    True => "true"
    Then => "then"
    Import => "import"
    Yield => "yield"
    While => "while"
    This => "this"
    Super => "super"

    // Others
    else => .dbg()
}
