import std::mem

import .value::{
    Value, Object, ObjectType, String, Function,
    FunctionCode, NativeFunction, UpValue, Class,
    Instance, Method
}
import ..compiler::{ Compiler }
import .{ VM, ValueCompareString }

const GC_DEBUG: bool = false
const ALLOC_DEBUG: bool = false
let STRESS_GC: bool = false

const GC_HEAP_GROW_FACTOR: u64 = 2

let bytes_allocated: u64 = 0
let next_gc: u64 = 1024u64 * 1024

////// GC Allocator Setup

namespace state {
    let compiler: &Compiler = null
    let vm: &VM = null
    let paused: bool = false
}

def set_compiler(compiler: &Compiler) => state::compiler = compiler
def set_vm(vm: &VM) => state::vm = vm

def gc_mem(old: untyped_ptr, new_size: u32): untyped_ptr {
    // This function handles _all_ the memory management for the Compiler + VM.
    //   (Note that parsing+lexing is handled by a `bump` allocator - all temp)
    //
    // We fall back to C's functions to actually allocate and free memory, but for our
    // bookkeeping purposes, we want to know the sizes of the pointers. C's functions
    // don't give us that, so we allocate 8 extra bytes to store the size of the pointer
    // before the actual pointer.
    //
    // Memory layout:
    //   [ xxxxxxxx | ........ ........ ........ ........ ........  ]
    //     ^          ^
    // 8 byte size    Pointer to actual memory return from this function
    let old_base = if old? then old - 8 else null
    let old_size = if old? then *(old_base as &u64) else 0u64
    if ALLOC_DEBUG then println(f"[GC MEM] Requested {new_size} bytes, old_ptr: {old}")

    if old_size < new_size as u64 and not state::paused {
        if bytes_allocated > next_gc or STRESS_GC {
            collect_garbage(state::vm, state::compiler)
            next_gc = bytes_allocated * GC_HEAP_GROW_FACTOR
        }
    }

    // free
    if new_size == 0 {
        mem::impl::free(old_base)
        if ALLOC_DEBUG then println(f"[GC MEM] Deleted {old_size} bytes from {bytes_allocated} bytes allocated, {old}")
        bytes_allocated -= old_size as u64
        return null
    }

    // alloc / realloc
    let new_base = match old_size {
        0 => mem::impl::calloc(1, new_size + 8),
        else => mem::impl::realloc(old_base, new_size + 8)
    }
    bytes_allocated += new_size as u64 - old_size as u64
    if ALLOC_DEBUG then println(f"[GC MEM] Reallocated {old_size} -> {new_size} bytes, total: {bytes_allocated} bytes allocated, res={new_base+8}")
    *(new_base as &u64) = new_size as u64
    return new_base + 8
}

def gc_alloc(_: mem::State, size: u32): untyped_ptr => gc_mem(null, size)
def gc_realloc(_: mem::State, ptr: untyped_ptr, old_size: u32, size: u32): untyped_ptr => gc_mem(ptr, size)
def gc_free(_: mem::State, ptr: untyped_ptr) => gc_mem(ptr, 0)

def initialize_gc_allocator() {
    if GC_DEBUG then println("[GC] Initializing GC allocator")
    let stress_gc = std::libc::getenv("STRESS_GC")
    if stress_gc? {
        STRESS_GC = true
    }
    mem::set_allocator(null, gc_alloc, gc_free)
}

/////


// Stats for nerds
let num_objects_allocated: u32 = 0
let num_objects_freed: u32 = 0
let num_garbage_collections: u32 = 0

//! Allocate a new Object of type `T` and return a reference to it.
//!
//! Precondition: First field of `T` must be a `Object` field.
def allocate_object<T>(type: ObjectType, vm: &VM, compiler: &Compiler = null): &T {
    if GC_DEBUG then println(f"[GC] Requesting allocation of object {type}")
    let res = mem::alloc<T>()
    res.obj.type = type
    res.obj.next = vm.objects
    res.obj.marked = false
    vm.objects = &res.obj
    num_objects_allocated += 1
    if GC_DEBUG then println(`[GC] ({res:p}) Allocated object {type}`)
    return res
}

//! Frees this object only, and doesn't touch any objects it references.
def free_object(obj: &Object, vm: &VM) {
    num_objects_freed += 1

    if GC_DEBUG {
        print(`[GC] ({obj:p}) Freeing object {obj.type}: `)
        obj.print()
        println("")
    }

    match obj.type {
        String => {
            let s = obj as &String
            // NOTE: Before we free this, make sure we remove it from the string table.
            let vcd = ValueCompareString(s.data, s.len, s.shash)
            vm.strings.remove(vcd)
            s.data.free()
        }
        Function => {
            let c = obj as &Function
            if c.upvalues? {
                c.upvalues.free()
            }
        }
        FunctionCode => {
            let f = obj as &FunctionCode
            f.chunk.free()
            // NOTE: A function does not own its name
        }
        Instance => {
            let i = obj as &Instance
            i.fields.free()
        }
        NativeFunction | UpValue | Method => {}
        Class => {
            let c = obj as &Class
            // NOTE: We free the list, but not the objects themselves.
            c.methods.free()
        }
    }

    mem::free(obj)
}

struct GarbageCollector {
    vm: &VM
    compiler: &Compiler
}

def GarbageCollector::free(&this) {
    // Do nothing for now...
}

def GarbageCollector::mark_object(&this, obj: &Object) {
    if not obj? return

    if GC_DEBUG {
        print(`[GC] ({obj:p}) Marking object {obj.type}: `)
        obj.print()
        println("")
    }
    if obj.marked return

    obj.marked = true
    .vm.grays += obj
}

def GarbageCollector::mark_value(&this, value: Value) {
    if value.is_obj() then .mark_object(value.as_obj())
}

def GarbageCollector::mark_compiler_roots(&this) {
    let cur = .compiler
    while cur? {
        .mark_object(&cur.func.obj)
        cur = cur.enclosing
    }
}

def GarbageCollector::mark_roots(&this) {
    for value in .vm.stack.iter() {
        .mark_value(value)
    }

    for value in .vm.tmp.iter() {
        .mark_value(value)
    }

    .mark_object(&.vm.func.obj)
    for frame in .vm.frames.iter() {
        .mark_object(&frame.func.obj)
    }

    for let cur = .vm.open_upvalues; cur?; cur = cur.next {
        .mark_object(&cur.obj)
    }

    for it in .vm.globals.items.iter() {
        .mark_object(&it.key.obj)
        .mark_value(it.value)
    }

    .mark_object(&.vm.init_string.obj)

    .mark_compiler_roots()
}

def GarbageCollector::blacken_object(&this, obj: &Object) {
    if not obj? return
    if GC_DEBUG {
        print(`[GC] Blackening object {obj} : `)
        obj.print()
        println("")
    }
    match obj.type {
        String => {}
        NativeFunction => {
            let nf = obj as &NativeFunction
            .mark_object(&nf.name.obj)
        }
        UpValue => {
            let uv = obj as &UpValue
            if uv.slot == 0 {
                .mark_value(uv.closed)
            }
        }
        Class => {
            let c = obj as &Class
            .mark_object(&c.name.obj)
            if c.methods? and c.methods.items? {
                for it in c.methods.items.iter() {
                    .mark_object(&it.key.obj)
                    .mark_object(&it.value.obj)
                }
            }
        }
        Method => {
            let m = obj as &Method
            .mark_value(m.this_val)
            .mark_object(&m.func.obj)
        }
        Instance => {
            let i = obj as &Instance
            .mark_object(&i.class.obj)
            if i.fields? {
                for it in i.fields.iter() {
                    .mark_object(&it.key.obj)
                    .mark_value(it.value)
                }
            }
        }
        FunctionCode => {
            let f = obj as &FunctionCode
            .mark_object(&f.name.obj)
            if f.chunk? {
                for constant in f.chunk.literals.iter() {
                    .mark_value(constant)
                }
            }
        }
        Function => {
            let f = obj as &Function
            if f.code? {
                .mark_object(&f.code.obj)
            }
            if f.upvalues? {
                for upvalue in f.upvalues.iter() {
                    .mark_object(&upvalue.obj)
                }
            }
        }
    }
}

def GarbageCollector::trace_references(&this) {
    while not .vm.grays.is_empty() {
        let obj = .vm.grays.pop()
        .blacken_object(obj)
    }
}

def GarbageCollector::sweep_unmarked(&this) {
    let prev: &Object = null
    let cur = .vm.objects
    let freed = 0
    while cur? {
        if not cur.marked {
            let next = cur.next
            if prev? {
                prev.next = next
            } else {
                .vm.objects = next
            }
            free_object(cur, .vm)
            freed++
            cur = next

        } else {
            cur.marked = false
            prev = cur
            cur = cur.next
        }
    }
    .vm.grays.clear()
    if GC_DEBUG and freed > 0 {
        println(`[GC] Freed {freed} objects`)
    }
}

def GarbageCollector::run(&this) {
    if GC_DEBUG then println("[GC] === BEGIN ===")
    .mark_roots()
    .trace_references()
    .sweep_unmarked()
    if GC_DEBUG then println("[GC] === END ===")
}

def collect_garbage(vm: &VM, compiler: &Compiler) {
    // Pausing further garbage collections till this one is done.
    num_garbage_collections++
    state::paused = true

    let gc = GarbageCollector(vm, compiler)
    gc.run()
    gc.free()

    state::paused = false
}

def print_stats(vm: &VM) {
    println("[GC] === STATS ===")
    println(`[GC]           Num GCs: {num_garbage_collections}`)
    println(`[GC] Allocated objects: {num_objects_allocated}`)
    println(`[GC]     Freed objects: {num_objects_freed}`)
    if vm.objects? {
        let num = 0
        for let cur = vm.objects; cur?; cur = cur.next {
            num++
        }
        println(`[GC]     Remaining objects: {num}`)
    }
    println(`[GC] Remaining bytes allocated: {bytes_allocated}`)
    println("[GC] === END ===")
}