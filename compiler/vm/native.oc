import @vm::value::{ Value }
import .{ VM }
import std::math

// FIXME: Move into ocen/std/time
[extern "clock"] def c_clock(): u64
[extern] const CLOCKS_PER_SEC: u64

def clock(vm: &VM, count: u32, args: &Value): Value {
    return Value::Float(c_clock() as f64 / CLOCKS_PER_SEC as f64)
}

def print(vm: &VM, count: u32, args: &Value): Value {
    for let i = 0; i < count; i++ {
        let val = args[i]
        if i > 0 {
            print(" ")
        }
        vm.print_value(val)
    }
    print("\n")
    return Value::Null()
}

def int_abs(vm: &VM, count: u32, args: &Value): Value {
    assert count == 1, "abs() takes exactly 1 argument"
    let val = args[0]
    assert val.is_int(), "abs() takes an integer argument"

    return Value::Int(val.as_int().abs())
}