import std::vector::{ Vector }
import std::compact_map::{ Map }
import std::span::{ Span }

import @vm::value::{ Value, String, Object }
import @bytecode::chunk::{ Chunk }

enum OpCode {
    Null
    True
    False
    Constant
    SetGlobal
    SetLocal
    GetGlobal
    GetLocal
    Print
    Call
    Pop
    Add
    Sub
    Mul
    Div
    Return
}

union InstructionData {
    lit_idx: u16 // Index into the literals array
}

struct Instruction {
    op: OpCode
    u: InstructionData
}

def Instruction::make(op: OpCode): Instruction {
    let inst: Instruction
    inst.op = op
    return inst
}

def Instruction::make_literal(op: OpCode, idx: u16): Instruction {
    let inst: Instruction
    inst.op = op
    inst.u.lit_idx = idx
    return inst
}

def Instruction::print(&this, chunk: &Chunk) {
    match .op {
        Constant => { 
            let constant = chunk.literals[.u.lit_idx as u32]
            print("Constant: "); 
            constant.print();
        }
        Add => print("Add")
        Sub => print("Sub")
        Mul => print("Mul")
        Div => print("Div")
        Return => print("Return")
        Call => print("Call (no args)")
        GetGlobal | SetGlobal => {
            let val = chunk.literal(.u.lit_idx).as_obj() as &String
            print(f"{.op}: {val.data}")
        }
        GetLocal | SetLocal => print(f"{.op}: {.u.lit_idx}")
        Null => print("Null")
        Pop => print("Pop")
        True => print("True")
        False => print("False")
        Print => print(f"Print {.u.lit_idx}")
    }
}